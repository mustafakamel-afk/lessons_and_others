dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.firebase:firebase-core:15.0.0'
    compile 'com.google.firebase:firebase-database:15.0.0'
    compile 'com.google.firebase:firebase-auth:15.1.0'
    compile 'com.google.android.gms:play-services-auth:15.0.1'
    testCompile 'junit:junit:4.12'
    compile files('picasso-2.5.2.jar')
}

apply plugin: 'com.google.gms.google-services'
================================================
    <uses-permission android:name="android.permission.INTERNET"/>
=======================================================

package com.example.ham.example;

import android.content.Intent;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.squareup.picasso.Picasso;

public class sing_up extends AppCompatActivity implements GoogleApiClient.OnConnectionFailedListener, View.OnClickListener {

    GoogleApiClient apiClient;
    private TextView name_textView;
    private ImageView user_imageView;
    Button sing_out_btn, sing_in_btn;
    private static final int RC_SING_IN = 9001;
    private static final String TAG = "SingInActivity";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sing_up);

        GoogleSignInOptions signInOptions  = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();

        apiClient  = new GoogleApiClient.Builder(this)
                .enableAutoManage(this,this)
                .addApi(Auth.GOOGLE_SIGN_IN_API,signInOptions)
                .build();


        name_textView = (TextView) findViewById(R.id.name_textView);
        user_imageView = (ImageView) findViewById(R.id.user_imageView);
        sing_out_btn = (Button) findViewById(R.id.sing_out_btn);
        sing_in_btn = (Button) findViewById(R.id.sing_in_btn);
        sing_in_btn.setOnClickListener(this);
        sing_out_btn.setOnClickListener(this);


    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){

            case R.id.sing_in_btn:
                singIn();
                break;
            case R.id.sing_out_btn:
                singOut();
                break;
        }


    }

    private  void  singIn(){
        Intent intent  = Auth.GoogleSignInApi.getSignInIntent(apiClient);
        startActivityForResult(intent,RC_SING_IN);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RC_SING_IN) {
            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
            handleSignInResult(result); //Â–« «·œ«·… ·· Õﬁﬁ „‰ «·»—Ìœ «·«·ﬂ —Ê‰Ì À„ Ì” œ⁄Ì Â–Â «·œ«·Â -->
        }
    }

    private void handleSignInResult(GoogleSignInResult result) {
        Log.d(TAG, "handleSignInResult : " + result.isSuccess());
        if (result.isSuccess()) {
//            startActivity(new Intent(MainActivity.this, Main2Activity.class));
            GoogleSignInAccount acct = result.getSignInAccount();
            name_textView.setText("„—Õ»« : " + acct.getDisplayName() + "\n" + "\n" + "»—Ìœﬂ «·«·ﬂ —Ê‰Ì :" + acct.getEmail());

            try {
                String PhotoUrl = acct.getPhotoUrl().toString();
                Picasso.with(sing_up.this).load(PhotoUrl).into(user_imageView);
            } catch (Exception e) {

            }
        }

    }


    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

        Log.d(TAG, "onConnecationFailed :" + connectionResult);

    }

    private  void  singOut(){

        Auth.GoogleSignInApi.signOut(apiClient).setResultCallback(new ResultCallback<Status>() {
            @Override
            public void onResult(@NonNull Status status) {
                Toast.makeText(getApplicationContext(), " „  ”ÃÌ· «·Œ—ÊÃ", Toast.LENGTH_SHORT).show();
                finish();
            }
        });
    }
}
